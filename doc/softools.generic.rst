generic â€” Preprocess a generic source file
==========================================

**Package: softools**

.. raw:: html

  <BODY>
  <TABLE WIDTH="100%" BORDER=0><TR>
  <TD ALIGN=LEFT><FONT SIZE=4>
  <B>generic (Feb86)</B></FONT></TD>
  <TD ALIGN=CENTER><FONT SIZE=4>
  <B>softools</B>
  </FONT></TD>
  <TD ALIGN=RIGHT><FONT SIZE=4>
  <B>generic (Feb86)</B></FONT></TD>
  </TR></TABLE><P>
  <TITLE>generic</TITLE>
  <UL>
  </UL>
  <H2><A NAME="s_name">NAME</A></H2>
  <! BeginSection: 'NAME'>
  <UL>
  generic -- generic preprocessor
  </UL>
  <! EndSection:   'NAME'>
  <H2><A NAME="s_usage">USAGE</A></H2>
  <! BeginSection: 'USAGE'>
  <UL>
  generic [-k] [-o ofile] [-p prefix] [-t types] files
  </UL>
  <! EndSection:   'USAGE'>
  <H2><A NAME="s_parameters">PARAMETERS</A></H2>
  <! BeginSection: 'PARAMETERS'>
  <UL>
  <DL>
  <DT><B><A NAME="l_">-k</A></B></DT>
  <! Sec='PARAMETERS' Level=0 Label='' Line='-k'>
  <DD>Allow the output files generated by <I>generic</I> to clobber any existing
  files.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">-o ofile</A></B></DT>
  <! Sec='PARAMETERS' Level=0 Label='' Line='-o ofile'>
  <DD>The name of the output file.  If this option is selected, only a single
  file can be processed.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">-p prefix</A></B></DT>
  <! Sec='PARAMETERS' Level=0 Label='' Line='-p prefix'>
  <DD>A prefix to be prepended to the output filenames.  This is useful when
  the output files are to be placed in a different directory.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">-t types</A></B></DT>
  <! Sec='PARAMETERS' Level=0 Label='' Line='-t types'>
  <DD>The datatypes for which output is desired.  One output file will be generated
  for each type specified, with <I>generic</I> automatically generating the
  output filename by appending the type character to the root filename of
  the input file.  The <I>type</I> string is some subset of [ubscilrdx],
  where the type characters are as follows.
  <DL>
  <DT><B><A NAME="l_"></A></B></DT>
  <! Sec='PARAMETERS' Level=1 Label='' Line=' '>
  <DD><PRE>
  u	- C unsigned short
  b	- C byte (char)
  c	- SPP character
  s	- SPP short
  i	- SPP int
  l	- SPP long
  r	- SPP real
  d	- SPP double
  x	- SPP complex
  </PRE>
  </DD>
  </DL>
  <P>
  This option cannot be used in combination with the -o option, and should
  not be used when generic code is expanded inline, rather than written into
  multiple output files.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_files">files</A></B></DT>
  <! Sec='PARAMETERS' Level=0 Label='files' Line='files'>
  <DD>The input file or files to be processed.  Generic input files should have
  the extension "<TT>.gx</TT>" or "<TT>.gc</TT>", although this is not required.  Only a single
  input file can be given if the -o option is specified.
  </DD>
  </DL>
  </UL>
  <! EndSection:   'PARAMETERS'>
  <H2><A NAME="s_description">DESCRIPTION</A></H2>
  <! BeginSection: 'DESCRIPTION'>
  <UL>
  The generic preprocessor is used to translate generic source code (code
  written to work for any datatype) into type dependent source code,
  suitable for compilation and insertion into a library.  The generic source
  is translated for each datatype, producing a type dependent copy of the
  source code for each datatype.  There are two primary modes of operation:
  <P>
  <DL>
  <DT><B><A NAME="l_"></A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line=' '>
  <DD><DL>
  <DT><B><A NAME="l_">[1]</A></B></DT>
  <! Sec='DESCRIPTION' Level=1 Label='' Line='[1]'>
  <DD>The generic source is embedded in a normal file, bracketed by <I>$for</I> and
  <I>$endfor</I> directives.  There is one input file and one somewhat larger
  output file, with the generic code in the input file being replaced in the
  output file by several copies of the enclosed source, one for each datatype.
  This mode is most commonly used for modules to be linked in their entirety 
  into an applications package.  The "<TT>-o</TT>" parameter is used to specify
  the output filename.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">[2]</A></B></DT>
  <! Sec='DESCRIPTION' Level=1 Label='' Line='[2]'>
  <DD>The entire input file is generic.  There may be multiple input files, and
  for each input file N output files are generated, one for each datatype
  specified with the "<TT>-t</TT>" parameter.  The output filenames are automatically
  generated by appending the type character to the root filename of the
  input file.  This mode is most commonly used for object libraries.
  </DD>
  </DL>
  </DD>
  </DL>
  <P>
  <P>
  The generic preprocessor operates by token replacement (currently using a
  UNIX <I>Lex</I> lexical analyzer).  The input stream is broken up into a
  stream of tokens.  Each token is examined to see if it is in the following
  list, and the indicated action is taken if the token is matched.  The generic
  preprocessor directives have the form "<TT>$NAME</TT>", where $ marks a <I>generic</I>
  directive, and where NAME is the name of the directive.
  <DL>
  <DT><B><A NAME="l_PIXEL">PIXEL</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='PIXEL' Line='PIXEL'>
  <DD>Replaced by the current type name, e.g., "<TT>int</TT>", "<TT>real</TT>", etc.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_XPIXEL">XPIXEL</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='XPIXEL' Line='XPIXEL'>
  <DD>Replaced by the current type name in upper case, preceded by an X,
  e.g., "<TT>XINT</TT>", "<TT>XREAL</TT>", etc.  This is used for generic C procedures meant
  to be called from SPP or Fortran.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_INDEF">INDEF</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='INDEF' Line='INDEF'>
  <DD>Replaced by the numeric constant denoting indefinite for the current
  datatype.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_INDEF">INDEF[SILRDX]</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='INDEF' Line='INDEF[SILRDX]'>
  <DD>These strings are <I>not</I> replaced, since the "<TT>INDEF</TT>" in this case is
  not generic.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_SZ_PIXEL">SZ_PIXEL</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='SZ_PIXEL' Line='SZ_PIXEL'>
  <DD>Replaced by "<TT>SZ_INT</TT>", "<TT>SZ_REAL</TT>", etc.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_TY_PIXEL">TY_PIXEL</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='TY_PIXEL' Line='TY_PIXEL'>
  <DD>Replaced by "<TT>TY_INT</TT>", "<TT>TY_REAL</TT>", etc.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">$PIXEL</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='$PIXEL'>
  <DD>Replaced by the string "<TT>PIXEL</TT>".  This is used in doubly generic sources,
  where the first pass translates $PIXEL to PIXEL, and the second to the
  actual type string.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">$INDEF</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='$INDEF'>
  <DD>Replaced by the string "<TT>INDEF</TT>".
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">$t</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='$t'>
  <DD>Replaced by one of the characters [ubcsilrdx].
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">$T</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='$T'>
  <DD>Replaced by one of the characters [UBCSILRDX].
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">$/.../</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='$/.../'>
  <DD>Replaced by the string "<TT>...</TT>", i.e., whatever is within the // delimiters.
  Used to disable generic preprocessing of arbitrary text.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">[0-9]+("<TT>$f</TT>"|"<TT>$F</TT>")</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='[0-9]+("$f"|"$F")'>
  <DD>Replaced by the corresponding real or double constant.  For example,
  "<TT>1$f</TT>" translates as "<TT>1.0</TT>" for type real, but as "<TT>1.0D0</TT>" for type double.
  </DD>
  </DL>
  <P>
  <DL>
  <DT><B><A NAME="l_">$if (expression)</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='$if (expression)'>
  <DD>The conditional preprocessing facility.  If the $IF tests false the code
  which follows is skipped over, and is not copied to the output file.
  Control transfers to the matching $ELSE or $ENDIF.  The following may be
  used in the boolean expression:
  <P>
  <PRE>
  "datatype"	denotes the current type
  ubcsilrdx	any subset of these characters denotes
  		    the corresponding datatype
  sizeof()	the size of the specified type,
  		    e.g., for comparisons
  <P>
  != ==		the relational operators
   &gt;  &lt;  &gt;= &lt;=
  <P>
  <P>
  Examples:
  <P>
  	$if (datatype != dx)
  	    (code to be compiled if type not d or x)
  <P>
  	$if (sizeof(i) &lt;= sizeof(r))
  	    (code to be compiled if size int &lt;= real)
  </PRE>
  <P>
  $IF constructs may be nested.  The directive may appear anywhere on
  a line.
  </DD>
  </DL>
  <P>
  <DL>
  <DT><B><A NAME="l_">$else</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='$else'>
  <DD>Marks the else clause of a $IF.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">$endif</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='$endif'>
  <DD>Marks the end of a $IF.  One is required for every $IF.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">$for (types)</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='$for (types)'>
  <DD>For each of the listed types, output a translated copy of the code between
  the $FOR and the matching $ENDFOR.  Nesting is permitted.
  <P>
  <PRE>
  Example:
  	$for (silrd)
  	(any amount of generic code)
  	$endfor
  </PRE>
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">$endfor</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='$endfor'>
  <DD>Marks the end of a $FOR statement.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">$$</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='$$'>
  <DD>Replaced by a single $.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">/*...*/</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='/*...*/'>
  <DD>C comments are not preprocessed.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">"<TT>...</TT>"</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='"..."'>
  <DD>Quoted strings are not preprocessed.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">#...(EOL)</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='#...(EOL)'>
  <DD>SPP comments are not preprocessed.
  </DD>
  </DL>
  <DL>
  <DT><B><A NAME="l_">%...(EOL)</A></B></DT>
  <! Sec='DESCRIPTION' Level=0 Label='' Line='%...(EOL)'>
  <DD>SPP Fortran escapes are not preprocessed.
  </DD>
  </DL>
  </UL>
  <! EndSection:   'DESCRIPTION'>
  <H2><A NAME="s_examples">EXAMPLES</A></H2>
  <! BeginSection: 'EXAMPLES'>
  <UL>
  1. Translate the generic source "<TT>aadd.gx</TT>" to produce the six output files
  "<TT>aadds.x</TT>", "<TT>aaddi.x</TT>", etc., in the subdirectory "<TT>ak</TT>", clobbering any
  existing files therein.  The <I>generic</I> task is a bootstrap utility
  written in C and is implemented as a CL foreign task, hence the UNIX
  command syntax.
  <P>
  	cl&gt; generic -k -p ak/ -t silrdx aadd.gx
  <P>
  2. Perform an inline transformation ($FOR directive) of the source file
  "<TT>imsum.gx</TT>", producing the single file "<TT>imsum.x</TT>" as output.
  <P>
  	cl&gt; generic -k -o imsum.x imsum.gx
      
  3. The following is a simple example of a typical generic source file.
  For additional examples, see the "<TT>.gx</TT>" sources in the VOPS, IMIO, IMAGES
  and other directories.
  <P>
  <PRE>
  # ALIM -- Compute the limits (minimum and maximum values) of a vector.
  # (this is a copy of the file vops$alim.gx).
  <P>
  procedure alim$t (a, npix, minval, maxval)
  <P>
  PIXEL	a[ARB], minval, maxval, value
  int	npix, i
  <P>
  begin
  	minval = a[1]
  	maxval = a[1]
  <P>
  	do i = 1, npix {
  	    value = a[i]
  	    $if (datatype == x)
  		if (abs(value) &lt; abs(minval))
  		    minval = value
  		else if (abs(value) &gt; abs(maxval))
  		    maxval = value
  	    $else
  		if (value &lt; minval)
  		    minval = value
  		else if (value &gt; maxval)
  		    maxval = value
  	    $endif
  	}
  end
  </PRE>
  </UL>
  <! EndSection:   'EXAMPLES'>
  <H2><A NAME="s_see_also">SEE ALSO</A></H2>
  <! BeginSection: 'SEE ALSO'>
  <UL>
  xc, xyacc
  </UL>
  <! EndSection:    'SEE ALSO'>
  
  <! Contents: 'NAME' 'USAGE' 'PARAMETERS' 'DESCRIPTION' 'EXAMPLES' 'SEE ALSO'  >
  
  </BODY>
  </HTML>